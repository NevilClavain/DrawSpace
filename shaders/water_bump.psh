/* -*-LIC_BEGIN-*- */
/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2020                     
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/
/* -*-LIC_END-*- */

/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2017                        
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/

float4x4 matWorldView : register(c104);


sampler2D Texture0 : register(s0);

struct PS_INTPUT 
{
	float4 TexCoord0: TEXCOORD0;
};


float3 compute_water_bump_vector(int p_texture_resol, sampler2D p_water_bump_texture, float2 p_tex_coords, float p_vector_bias)
{
    float3 avg = 0.0;

    float texel_size = 1.0 / p_texture_resol;

    float2 left_coords = p_tex_coords;
    left_coords.x -= texel_size;

    float2 right_coords = p_tex_coords;
    right_coords.x += texel_size;

    float2 up_coords = p_tex_coords;
    up_coords.y -= texel_size;

    float2 down_coords = p_tex_coords;
    down_coords.y += texel_size;

    float4 wb_left = tex2D(p_water_bump_texture, left_coords);
    float4 wb_right = tex2D(p_water_bump_texture, right_coords);
    float4 wb_up = tex2D(p_water_bump_texture, up_coords);
    float4 wb_down = tex2D(p_water_bump_texture, down_coords);
    float4 wb_center = tex2D(p_water_bump_texture, p_tex_coords);

    float3 vec_left;
    vec_left.x = -p_vector_bias;
    vec_left.y = 0.0;
    vec_left.z = (wb_left.x - wb_center.x);

    float3 vec_right;
    vec_right.x = p_vector_bias;
    vec_right.y = 0.0;
    vec_right.z = (wb_right.x - wb_center.x);

    float3 vec_up;
    vec_up.x = 0.0;
    vec_up.y = -p_vector_bias;
    vec_up.z = (wb_up.x - wb_center.x);

    float3 vec_down;
    vec_down.x = 0.0;
    vec_down.y = p_vector_bias;
    vec_down.z = (wb_down.x - wb_center.x);

    float3 vec1 = normalize(cross(vec_right, vec_down));
    float3 vec2 = normalize(cross(vec_down, vec_left));
    float3 vec3 = normalize(cross(vec_left, vec_up));
    float3 vec4 = normalize(cross(vec_up, vec_right));

    avg = normalize(0.25 * (vec1 + vec2 + vec3 + vec4));

    return avg;
}

float4 ps_main( PS_INTPUT input ) : COLOR0
{
    float4 res_color = 0;

    float3 np;
    np = compute_water_bump_vector(256, Texture0, input.TexCoord0.xy, 0.7);

    float4 np2;

    
    np2.x = np.x;
    np2.y = np.z;
    np2.z = np.y;
    np2.w = 1.0;
    

    float3 np_t = mul(np2, transpose(matWorldView));
    float3 nbase_t = mul(float4(0.0, 1.0, 0.0, 1.0), transpose(matWorldView));  
      
    res_color.xyz = np_t - nbase_t;

    return res_color;
}
