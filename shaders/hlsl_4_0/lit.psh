/* -*-LIC_BEGIN-*- */
/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2018                        
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/
/* -*-LIC_END-*- */


cbuffer legacyargs : register(b0)
{
    float4 vec[512];
    Matrix mat[512];
};

Texture2D txColor           : register(t0);
SamplerState samColor       : register(s0);

struct PS_INTPUT 
{
    float4 Position     : SV_POSITION;
    float2 TexCoord0    : TEXCOORD0;
    float4 Normale      : TEXCOORD1;
    float4 Tangent      : TEXCOORD2;
    float4 Binormale    : TEXCOORD3;
    float4 Half0        : TEXCOORD4;
};

#include "mat_input_constants.hlsl"
#include "generic_rendering.hlsl"

// base_color = (bf * texture) + ((1-bf) * input_color )

// pl = f(base_color, lights)

// em = self-emissive
// ab = lightabsorption
 
// (1-em) * (ab * pl) + (em * base_color)

float4 ps_main(PS_INTPUT input) : SV_Target
{
    float4 final_color = 0.0;

    float4 spec_flags = vec[7];
    float4 self_emissive = vec[8];
    float4 absorption = 1.0 - vec[9];
    float4 color = vec[10];
    float4 color_source = vec[11];

    float spec_power = spec_flags.y;
    bool spec_enabled = spec_flags.x;

    float4 Ambient_Color = vec[0];
    float4 Lights_Enabled = vec[1];
    float4 Light0_Color = vec[2];
    float4 Light0_Dir = vec[3];

    float4x4 mat_World = mat[matWorld_ps];

    float4 tn = TransformedNormaleForLights(input.Normale.xyz, mat_World);


    float4 base_color = (color_source * txColor.Sample(samColor, input.TexCoord0)) + ((1.0 - color_source) * color);

    float4 pixel_light_color = 0.0;

    pixel_light_color += computePixelColorFromLight(base_color, Ambient_Color, (bool) Lights_Enabled.x, Light0_Color,
                                                Light0_Dir, /*input.Normale*/tn, spec_enabled, spec_power, input.Half0);

    final_color = ((1.0 - self_emissive) * (absorption * pixel_light_color)) + (self_emissive * base_color);

    return saturate(final_color);
}
