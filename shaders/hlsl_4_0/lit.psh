/* -*-LIC_BEGIN-*- */
/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2018                        
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/
/* -*-LIC_END-*- */


cbuffer legacyargs : register(b0)
{
    float4 vec[512];
    Matrix mat[512];
};


Texture2D txDiffuse         : register(t0);
SamplerState sam            : register(s0);

struct PS_INTPUT 
{
    float4 Position : SV_POSITION;
	float2 TexCoord0: TEXCOORD0;
    float4 Normale : TEXCOORD1;
};


float4 ps_main(PS_INTPUT input) : SV_Target
{   
    //return txDiffuse.Sample(sam, input.TexCoord0);

    float4 final_color = 0.0;

    float4 baseColor = txDiffuse.Sample(sam, input.TexCoord0);

    float4 Light0_Color = 1.0;

    float3 nNorm = normalize(input.Normale);
	

    float diff;

    float3 ld;
    ld[0] = 1.0;
    ld[1] = 1.0;
    ld[2] = 0.0;

    diff = dot(normalize(ld), nNorm);

    final_color += max(0.0, diff * baseColor * Light0_Color);
    
    return saturate(final_color);
}
