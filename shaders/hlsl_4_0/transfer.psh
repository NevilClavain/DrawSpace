/* -*-LIC_BEGIN-*- */
/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2020                     
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/
/* -*-LIC_END-*- */

cbuffer legacyargs : register(b0)
{
    float4 vec[512];
    Matrix mat[512];
};

Texture2D txDiffuse         : register(t0);
SamplerState sam            : register(s0);

Texture2D txZMask           : register(t1);
SamplerState samZMask       : register(s1);


struct PS_INTPUT 
{
    float4 Position : SV_POSITION;
	float2 TexCoord0: TEXCOORD0;
};

#include "mat_input_constants.hlsl"
#include "fbm.hlsl"

float2 rayBoxDst(float3 boundsMin, float3 boundsMax, float3 rayOrigin, float3 rayDir)
{
	float3 t0;
	float3 t1;
	float3 tmin;
	float3 tmax;

	if (abs(rayDir.x) > 0.0)
	{
		t0.x = (boundsMin.x - rayOrigin.x) / rayDir.x;
		t1.x = (boundsMax.x - rayOrigin.x) / rayDir.x;
		
		tmin.x = min(t0.x, t1.x);
		tmax.x = max(t0.x, t1.x);
	}
	else
	{
		tmin.x = -2000000000;
		tmax.x = 2000000000;
	}

	if (abs(rayDir.y) > 0.0)
	{
		t0.y = (boundsMin.y - rayOrigin.y) / rayDir.y;
		t1.y = (boundsMax.y - rayOrigin.y) / rayDir.y;

		tmin.y = min(t0.y, t1.y);
		tmax.y = max(t0.y, t1.y);
	}
	else
	{
		tmin.y = -2000000000;
		tmax.y = 2000000000;
	}

	if (abs(rayDir.z) > 0.0)
	{
		t0.z = (boundsMin.z - rayOrigin.z) / rayDir.z;
		t1.z = (boundsMax.z - rayOrigin.z) / rayDir.z;

		tmin.z = min(t0.z, t1.z);
		tmax.z = max(t0.z, t1.z);
	}
	else
	{
		tmin.z = -2000000000;
		tmax.z = 2000000000;
	}

	float dstA = max(max(tmin.x, tmin.y), tmin.z);
	float dstB = min(tmax.x, min(tmax.y, tmax.z));

	float dstToBox = max(0, dstA);
	float dstInsideBox = max(0, dstB - dstToBox);

	return float2(dstToBox, dstInsideBox);
}

#define STEPS			1000.0f
#define STEP_SIZE		0.1f
#define DENSITY_WEIGHT  0.005f


bool inVolume(float3 boundsMin, float3 boundsMax, float3 position)
{
	bool status = false;
	if (boundsMin.x < position.x && position.x < boundsMax.x)
	{
		if (boundsMin.y < position.y && position.y < boundsMax.y)
		{
			if (boundsMin.z < position.z && position.z < boundsMax.z)
			{
				status = true;
			}
		}
	}
	return status;
}

float computeLocaleDensity(float3 position)
{	
	return 1.0;
}

float3 raymarch(float3 boundsMin, float3 boundsMax, float3 position, float3 direction, float3 color_source, bool zmask)
{
	float3 color_res;
	float3 color_container = { 0.9, 0.9, 0.9 };

	float distance;
	bool cont = 1;
	float final_density = 0.0;
	bool ignore_zmask = false;
	
	if (inVolume(boundsMin, boundsMax, position))
	{
		ignore_zmask = true;
	}

	for (int i = 0; i < STEPS && cont == 1; i++)
	{
		if (inVolume(boundsMin, boundsMax, position))
		{
			float locale_density = computeLocaleDensity(position);
			final_density = final_density + (DENSITY_WEIGHT * locale_density);
		}
		position += direction * STEP_SIZE;
	}
	float3 color_blend = lerp(color_source, color_container, clamp(final_density, 0.0, 1.0));

	if (ignore_zmask)
	{
		color_res = color_blend;
	}
	else
	{
		if (zmask)
		{
			color_res = color_blend;
		}
		else
		{
			color_res = color_source;
		}		
	}

	return color_res;
}

float4 ps_main(PS_INTPUT input) : SV_Target
{
	float4 color_dest;

	float4 camera_params = vec[0];
	Matrix mat_cam = mat[1];
	Matrix mat_pos = mat[5];
	float3 container_half_dims = vec[9].xyz;


	float camera_width = camera_params.x;
	float camera_height = camera_params.y;
	float camera_zn = camera_params.z;

	float3 ray_origin;
	

	Matrix pos_rot = mat_pos;
	pos_rot[3][0] = 0.0;
	pos_rot[3][1] = 0.0;
	pos_rot[3][2] = 0.0;
	pos_rot = transpose(pos_rot); // inverse rot mat


	ray_origin.x = mat_cam[3][0];
	ray_origin.y = mat_cam[3][1];
	ray_origin.z = mat_cam[3][2];



	float3 container_pos;
	container_pos.x = mat_pos[3][0];
	container_pos.y = mat_pos[3][1];
	container_pos.z = mat_pos[3][2];

	float3 localcontainer_rayOrigin = ray_origin - container_pos;

	// compute camera-local ray direction
	float4 localcam_rayDir;
	localcam_rayDir.x = (input.TexCoord0.x - 0.5) * camera_width;
	localcam_rayDir.y = ((1.0 - input.TexCoord0.y) - 0.5) * camera_height;
	localcam_rayDir.z = -camera_zn;
	localcam_rayDir.w = 1.0;

	// compute global ray direction
	mat_cam[3][0] = 0.0;
	mat_cam[3][1] = 0.0;
	mat_cam[3][2] = 0.0;
	float4 global_rayDir = mul(localcam_rayDir, mat_cam);

	// compute local container ray direction
	float4 local_rayDir = mul(global_rayDir, pos_rot);
	
	float3 bounds_min = - container_half_dims;
	float3 bounds_max = container_half_dims;

	float2 intersection = rayBoxDst(bounds_min, bounds_max, localcontainer_rayOrigin, local_rayDir.xyz);

	float dstToBox = intersection.x;
	float dstInsideBox = intersection.y;
	
	float4 color_source = txDiffuse.Sample(sam, input.TexCoord0);
	float4 zmask        = txZMask.Sample(samZMask, input.TexCoord0);

	//color_dest = color_source;	

	/*
	if (dstInsideBox > 0.0 && zmask.x > 0.0)
	{
		color_dest.a = 1.0;
		color_dest.rgb = raymarch(bounds_min, bounds_max, localcontainer_rayOrigin, local_rayDir.xyz, color_source.rgb);

	}
	else
	{
		color_dest = color_source;
	}
	*/

	color_dest.a = 1.0;
	color_dest.rgb = raymarch(bounds_min, bounds_max, localcontainer_rayOrigin, local_rayDir.xyz, color_source.rgb, zmask.x);

		
	return color_dest;
}
