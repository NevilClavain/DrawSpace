/* -*-LIC_BEGIN-*- */
/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2020                     
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/
/* -*-LIC_END-*- */

cbuffer legacyargs : register(b0)
{
    float4 vec[512];
    Matrix mat[512];
};


Texture2D txDiffuse         : register(t0);
SamplerState sam            : register(s0);

Texture2D ModMask           : register(t1);
SamplerState sampModMask    : register(s1);

struct PS_INTPUT 
{
    float4 Position         : SV_POSITION;
	float2 TexCoord0        : TEXCOORD0;
    float2 TexCoord1        : TEXCOORD1;
    float4 Normale          : TEXCOORD2;
    float4 Color            : TEXCOORD3;
};



float4 ps_main(PS_INTPUT input) : SV_Target
{
    float4 color_neb = txDiffuse.Sample(sam, input.TexCoord0);    
    float4 color_mask = ModMask.Sample(sampModMask, input.TexCoord1);
    float4 color_global = input.Color;

    color_global.a = abs(input.Normale.z * input.Normale.z);


    float4 final_neb_color = color_mask * color_neb;
    
    final_neb_color.w = (0.216 * final_neb_color.r + 0.7152 * final_neb_color.g + 0.0722 * final_neb_color.b);

    return color_global * final_neb_color;
}
