/* -*-LIC_BEGIN-*- */
/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2018                        
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/
/* -*-LIC_END-*- */

float4      Ambient_Color   : register(c0);
float4      Lights_Enabled  : register(c1);
float4      Light0_Color    : register(c2);
float4      Light0_Dir      : register(c3);
float4      SpecFlags       : register(c7);

sampler2D   Texture0        : register(s0);

struct PS_INTPUT 
{
    float4 Position     : POSITION0;
    float4 TexCoord0    : TEXCOORD0;
    float4 Normale      : TEXCOORD1;
    float4 Half0        : TEXCOORD2;
};

#include "generic_rendering.hlsl"

float4 ps_main( PS_INTPUT input ) : COLOR0
{   
    float spec_power = SpecFlags.y;
    bool spec_enabled = SpecFlags.x;

    float4 final_color = 0.0;

    float4 baseColor = tex2D(Texture0, input.TexCoord0.xy);

    final_color += computePixelColorFromLight(baseColor, Ambient_Color, (bool)Lights_Enabled.x, Light0_Color,
                                                Light0_Dir, input.Normale, spec_enabled, spec_power, input.Half0);

    return saturate(final_color);
}
